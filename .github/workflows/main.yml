name: Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare deployment directories
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Create deployment directories if they don't exist
            sudo mkdir -p /home/receipts-data-extractor/receipts-data-extractor
            sudo chown -R receipts-data-extractor:receipts-data-extractor /home/receipts-data-extractor

            # Create temporary directory for new code
            rm -rf /tmp/receipts-data-extractor-deploy
            mkdir -p /tmp/receipts-data-extractor-deploy

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "."
          target: "/tmp/receipts-data-extractor-deploy"

      - name: Smart deployment with selective service updates
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Ensure directory exists
            mkdir -p /home/receipts-data-extractor/receipts-data-extractor
            cd /home/receipts-data-extractor/receipts-data-extractor
            
            # Backup current deployment (if it exists)
            if [ -d "/home/receipts-data-extractor/receipts-data-extractor" ] && [ "$(ls -A /home/receipts-data-extractor/receipts-data-extractor)" ]; then
              cp -r /home/receipts-data-extractor/receipts-data-extractor /home/receipts-data-extractor/receipts-data-extractor-backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            fi

            # Check if app is running and healthy
            APP_RUNNING=false
            
            if docker compose ps --services --filter "status=running" | grep -q "app"; then
              if curl -f http://localhost:8000/health >/dev/null 2>&1; then
                APP_RUNNING=true
                echo "✅ App is running and healthy"
              else
                echo "⚠️ App container is running but not healthy"
              fi
            else
              echo "❌ App is not running"
            fi

            # Replace with new code
            rm -rf /home/receipts-data-extractor/receipts-data-extractor/*
            cp -r /tmp/receipts-data-extractor-deploy/* /home/receipts-data-extractor/receipts-data-extractor/
            cd /home/receipts-data-extractor/receipts-data-extractor

            # Set proper permissions
            chmod +x *.sh 2>/dev/null || true

            # Stop the app service to update it
            echo "Stopping app service for update..."
            docker compose stop app 2>/dev/null || true
            docker compose rm -f app 2>/dev/null || true

            # Build the app service
            echo "Building app service..."
            docker compose build app

            # Start the service
            echo "Starting app service..."
            docker compose up -d app

            # Wait for containers to start
            sleep 15

            # Verify containers are running
            echo "Container status:"
            docker compose ps

            # Clean up unused images
            rm -rf /tmp/receipts-data-extractor-deploy
            docker image prune -f --filter "label=com.docker.compose.service=app" 2>/dev/null || true

            # Test the deployment
            echo "Testing deployment..."
            curl -f http://localhost:8000/health || echo "App not responding"