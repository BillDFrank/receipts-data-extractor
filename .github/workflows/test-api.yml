name: Test API

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: pingo-receipt-parser:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start API service
        run: |
          docker run -d --name api-test -p 8000:8000 pingo-receipt-parser:test
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "✅ API is healthy"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Test health endpoint
        run: |
          echo "Testing health endpoint..."
          response=$(curl -s http://localhost:8000/health)
          echo "Health response: $response"

          # Check if response contains expected fields
          if echo "$response" | jq -e '.status == "healthy"' >/dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Test root endpoint
        run: |
          echo "Testing root endpoint..."
          response=$(curl -s http://localhost:8000/)
          echo "Root response: $response"

          # Check if response contains expected fields
          if echo "$response" | jq -e '.message' >/dev/null 2>&1; then
            echo "✅ Root endpoint test passed"
          else
            echo "❌ Root endpoint test failed"
            exit 1
          fi

      - name: Test extract endpoint with invalid file
        run: |
          echo "Testing extract endpoint with invalid file..."
          response=$(curl -s -X POST "http://localhost:8000/extract" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@README.md")

          # Should return error for non-PDF file
          if echo "$response" | jq -e '.detail' >/dev/null 2>&1; then
            echo "✅ Invalid file test passed (correctly rejected non-PDF)"
          else
            echo "❌ Invalid file test failed"
            exit 1
          fi

      - name: Test extract endpoint without file
        run: |
          echo "Testing extract endpoint without file..."
          response=$(curl -s -X POST "http://localhost:8000/extract")

          # Should return validation error
          if echo "$response" | jq -e '.detail' >/dev/null 2>&1; then
            echo "✅ No file test passed (correctly returned validation error)"
          else
            echo "❌ No file test failed"
            exit 1
          fi

      - name: Test extract-batch endpoint without files
        run: |
          echo "Testing extract-batch endpoint without files..."
          response=$(curl -s -X POST "http://localhost:8000/extract-batch")

          # Should return validation error
          if echo "$response" | jq -e '.detail' >/dev/null 2>&1; then
            echo "✅ Batch no files test passed (correctly returned validation error)"
          else
            echo "❌ Batch no files test failed"
            exit 1
          fi

      - name: Test extract-batch endpoint with invalid files
        run: |
          echo "Testing extract-batch endpoint with invalid files..."
          response=$(curl -s -X POST "http://localhost:8000/extract-batch" \
            -H "Content-Type: multipart/form-data" \
            -F "files=@README.md" \
            -F "files=@pyproject.toml")

          # Should return success with failed extractions
          if echo "$response" | jq -e '.total_files == 2 and .failed_extractions >= 1' >/dev/null 2>&1; then
            echo "✅ Batch invalid files test passed"
          else
            echo "❌ Batch invalid files test failed"
            echo "Response: $response"
            exit 1
          fi

      - name: Run pytest tests
        run: |
          echo "Running pytest tests..."
          docker run --rm pingo-receipt-parser:test python -m pytest src/tests/ -v

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up..."
          docker stop api-test || true
          docker rm api-test || true
          docker image rm pingo-receipt-parser:test || true

      - name: Test Results
        if: always()
        run: |
          echo "🎉 API testing completed!"
          echo "✅ Health endpoint working"
          echo "✅ Root endpoint working"
          echo "✅ File validation working"
          echo "✅ Error handling working"
          echo "✅ Batch endpoint working"
          echo "✅ Unit tests passing"